{"version":3,"sources":["components/AlgorithmControl.js","components/ArrayControl.js","components/Navbar.js","components/Bar.js","components/Array.js","algorithms/HeapSort.js","algorithms/MergeSort.js","algorithms/QuickSort.js","algorithms/BubbleSort.js","algorithms/SelectionSort.js","SortingController.js","App.js","reportWebVitals.js","index.js"],"names":["AlgorithmControl","algorithm","algorithms","changeAlgorithm","state","DropdownButton","id","title","variant","className","disabled","APP_STATE","sorting","onSelect","eventKey","event","target","innerHTML","map","index","Dropdown","Item","ArrayControl","rangeSliderValue","changeArraySize","style","color","tooltip","min","max","value","onChange","Button","onClick","NavBar","sortHandler","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","Nav","type","getColor","BAR_STATE","pivot","BAR_COLORS","normal","compared","finished","swapped","sorted","getWidth","size","Bar","height","width","backgroundColor","Array","array","Container","Row","bar","length","swap","i","j","hasLeftChild","hasRightChild","getLeftChildIndex","getRightChildIndex","getValue","heapifyDown","animations","leftChildIndex","rightChildIndex","biggerChildIndex","push","ANIMATION_TYPE","comparison","animateHeapSort","setArray","setState","ANIMATION_SPEED","idx","sortedIndex","lastParentIndex","Math","floor","end","heapSort","slice","forEach","animation","currentArray","setTimeout","finishedArray","sortedArray","ARRAY_FLASH_SPEED","mergeSort","originalArray","auxiliaryArray","start","mid","k","merge","animateMergeSort","quicksort","partition","animateQuickSort","animateBubbleSort","bubbleSort","animateSelectionSort","selectionSort","sort","alert","default","ALGORITHMS","App","getAnimationSpeed","speedFactor","useState","setSize","setAlgorithm","setAnimationSpeed","useEffect","generateRandomArray","random","href","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3bf0b08a.chunk.js","sourcesContent":["import Dropdown from \"react-bootstrap/Dropdown\"\nimport DropdownButton from \"react-bootstrap/DropdownButton\"\nimport { APP_STATE } from \"../App\"\n\nconst AlgorithmControl = ({\n  algorithm,\n  algorithms,\n  changeAlgorithm,\n  state,\n}) => {\n  return (\n    <DropdownButton\n      id=\"algorithm\"\n      title={algorithm}\n      variant=\"outline-light\"\n      className=\"mx-auto\"\n      disabled={state === APP_STATE.sorting}\n      onSelect={(eventKey, event) => {\n        changeAlgorithm(event.target.innerHTML)\n      }}\n    >\n      {algorithms.map((algorithm, index) => {\n        return <Dropdown.Item key={index}>{algorithm}</Dropdown.Item>\n      })}\n    </DropdownButton>\n  )\n}\n\nexport default AlgorithmControl\n","import Button from \"react-bootstrap/Button\"\nimport RangeSlider from \"react-bootstrap-range-slider\"\nimport { APP_STATE } from \"../App\"\n\nconst ArrayControl = ({ rangeSliderValue, changeArraySize, state }) => {\n  return (\n    <>\n      <span style={{ color: \"white\" }} className=\"my-2 mx-4\">\n        Change Array Size & Sorting Speed\n      </span>\n      <RangeSlider\n        variant=\"secondary\"\n        tooltip=\"off\"\n        min={5}\n        max={100}\n        value={rangeSliderValue}\n        disabled={state === APP_STATE.sorting}\n        onChange={(event) => {\n          changeArraySize(event.target.value)\n        }}\n      />\n      <Button\n        variant=\"outline-light\"\n        className=\"mx-2\"\n        disabled={state === APP_STATE.sorting}\n        onClick={() => changeArraySize()}\n      >\n        Generate New Array\n      </Button>\n    </>\n  )\n}\n\nexport default ArrayControl\n","import Nav from \"react-bootstrap/Nav\"\nimport Button from \"react-bootstrap/Button\"\nimport Navbar from \"react-bootstrap/Navbar\"\nimport AlgorithmControl from \"./AlgorithmControl\"\nimport ArrayControl from \"./ArrayControl\"\nimport { APP_STATE } from \"../App\"\n\nconst NavBar = ({\n  rangeSliderValue,\n  changeArraySize,\n  algorithm,\n  algorithms,\n  changeAlgorithm,\n  sortHandler,\n  state,\n}) => {\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n      <Navbar.Brand className=\"brand-name\">SortingVisualizer</Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"navbar-nav\" />\n      <Navbar.Collapse id=\"navbar-nav\">\n        <Nav className=\"ml-auto\">\n          <ArrayControl\n            rangeSliderValue={rangeSliderValue}\n            changeArraySize={changeArraySize}\n            state={state}\n          />\n          <AlgorithmControl\n            algorithm={algorithm}\n            algorithms={algorithms}\n            changeAlgorithm={changeAlgorithm}\n            state={state}\n          />\n          <Button\n            variant=\"light\"\n            type=\"submit\"\n            className=\"mx-2\"\n            disabled={state === APP_STATE.sorting}\n            onClick={sortHandler}\n            state={state}\n          >\n            Sort!\n          </Button>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  )\n}\n\nexport default NavBar\n","import { BAR_STATE, BAR_COLORS } from \"../App\"\n\nconst Bar = ({ height, state, size }) => {\n  return (\n    <div\n      style={{\n        height: `${height}vh`,\n        width: `${getWidth(size)}`,\n        backgroundColor: `${getColor(state)}`,\n      }}\n      className=\"bar\"\n    ></div>\n  )\n}\n\nconst getColor = (state) => {\n  switch (state) {\n    case BAR_STATE.pivot: return BAR_COLORS.pivot\n    case BAR_STATE.normal: return BAR_COLORS.normal\n    case BAR_STATE.compared: return BAR_COLORS.compared\n    case BAR_STATE.finished: return BAR_COLORS.finished\n    case BAR_STATE.swapped: return BAR_COLORS.swapped\n    case BAR_STATE.sorted: return BAR_COLORS.sorted\n    default: return \"aliceblue\"\n  }\n}\n\nconst getWidth = (size) => {\n  if (size < 8) return \"45px\"\n  else if (size < 15) return \"25px\"\n  else if (size < 30) return \"20px\"\n  else if (size < 45) return \"15px\"\n  else if (size < 60) return \"12px\"\n  else if (size < 75) return \"10px\"\n  else if (size < 90) return \"9px\"\n  else return \"8px\"\n}\n\nexport default Bar\n","import Container from \"react-bootstrap/Container\"\nimport Row from \"react-bootstrap/Row\"\nimport Bar from \"./Bar\"\n\nconst Array = ({ array }) => {\n  return (\n    <Container>\n      <Row className=\"flex-nowrap justify-content-center\">\n        {array.map((bar, index) => {\n          return (\n            <Bar\n              key={index}\n              height={bar.value}\n              state={bar.state}\n              size={array.length}\n            />\n          )\n        })}\n      </Row>\n    </Container>\n  )\n}\n\nexport default Array\n","import { BAR_STATE, APP_STATE, ARRAY_FLASH_SPEED } from \"../App\"\r\nimport { ANIMATION_TYPE } from \"../SortingController\"\r\n\r\nconst swap = (array, i, j) => {\r\n  const swap = array[i]\r\n  array[i] = array[j]\r\n  array[j] = swap\r\n}\r\n\r\nconst hasLeftChild = (length, index) => {\r\n  return 2 * index + 1 < length\r\n}\r\n\r\nconst hasRightChild = (length, index) => {\r\n  return 2 * index + 2 < length\r\n}\r\n\r\nconst getLeftChildIndex = (index) => {\r\n  return 2 * index + 1\r\n}\r\n\r\nconst getRightChildIndex = (index) => {\r\n  return 2 * index + 2\r\n}\r\n\r\nconst getValue = (array, index) => {\r\n  return array[index].value\r\n}\r\n\r\nconst heapifyDown = (array, length, index, animations) => {\r\n  while (hasLeftChild(length, index)) {\r\n    const leftChildIndex = getLeftChildIndex(index)\r\n    const rightChildIndex = getRightChildIndex(index)\r\n    let biggerChildIndex = leftChildIndex\r\n\r\n    if (hasRightChild(length, index)) {\r\n      animations.push([leftChildIndex, rightChildIndex, ANIMATION_TYPE.comparison])\r\n      if (getValue(array, rightChildIndex) > getValue(array, leftChildIndex)) {\r\n        biggerChildIndex = rightChildIndex\r\n      }\r\n    }\r\n\r\n    animations.push([index, biggerChildIndex, ANIMATION_TYPE.comparison])\r\n    if (getValue(array, index) > getValue(array, biggerChildIndex)) {\r\n      return\r\n    }\r\n\r\n    animations.push([index, biggerChildIndex, ANIMATION_TYPE.swap])\r\n    swap(array, index, biggerChildIndex)\r\n    index = biggerChildIndex\r\n  }\r\n}\r\n\r\nconst heapSort = (array) => {\r\n  const animations = [] // stores comparison or swap animations\r\n  const sortedIndex = [] // stores animation indexes to highlight sorted bars\r\n\r\n  let lastParentIndex = Math.floor((array.length - 1 - 2) / 2)\r\n  while (lastParentIndex >= 0) {\r\n    heapifyDown(array, array.length, lastParentIndex, animations)\r\n    lastParentIndex--\r\n  }\r\n\r\n  let end = array.length - 1\r\n  while (end > 0) {\r\n    swap(array, 0, end)\r\n    animations.push([0, end, ANIMATION_TYPE.swap])\r\n    sortedIndex.push(animations.length - 1)\r\n    heapifyDown(array, end, 0, animations)\r\n    end--\r\n  }\r\n\r\n  return { animations, sortedIndex }\r\n}\r\n\r\nconst animateHeapSort = (array, setArray, setState, ANIMATION_SPEED) => {\r\n  // change app state for disabling controls\r\n  setState(APP_STATE.sorting)\r\n\r\n  // sortedIndex pointer\r\n  let idx = 0\r\n\r\n  // get sorting animations\r\n  const { animations, sortedIndex } = heapSort(array.slice())\r\n\r\n  // process animations\r\n  // animation -> [firstIndex, secondIndex, ANIMATION_TYPE]\r\n  animations.forEach((animation, index) => {\r\n    const currentArray = array.slice()\r\n\r\n    // comparison animation\r\n    if (animation[2] === ANIMATION_TYPE.comparison) {\r\n      setTimeout(() => {\r\n        currentArray[animation[0]].state = BAR_STATE.compared\r\n        currentArray[animation[1]].state = BAR_STATE.compared\r\n        setArray(currentArray)\r\n      }, index * ANIMATION_SPEED)\r\n    }\r\n\r\n    // swap animation\r\n    if (animation[2] === ANIMATION_TYPE.swap) {\r\n      setTimeout(() => {\r\n        currentArray[animation[0]].state = BAR_STATE.swapped\r\n        currentArray[animation[1]].state = BAR_STATE.swapped\r\n        setArray(currentArray)\r\n      }, index * ANIMATION_SPEED)\r\n      setTimeout(() => {\r\n        const swap = currentArray[animation[0]].value\r\n        currentArray[animation[0]].value = currentArray[animation[1]].value\r\n        currentArray[animation[1]].value = swap\r\n        setArray(currentArray)\r\n      }, index * ANIMATION_SPEED)\r\n    }\r\n\r\n    // revert state\r\n    setTimeout(() => {\r\n      currentArray[animation[0]].state = BAR_STATE.normal\r\n      currentArray[animation[1]].state = BAR_STATE.normal\r\n      setArray(currentArray)\r\n    }, index * ANIMATION_SPEED)\r\n\r\n    // if animation sorts a bar\r\n    if (index === sortedIndex[idx]) {\r\n      idx++\r\n      setTimeout(() => {\r\n        currentArray[animation[1]].state = BAR_STATE.sorted\r\n        setArray(currentArray)\r\n      }, index * ANIMATION_SPEED)\r\n    }\r\n\r\n    // flash array to indicate sorting finished\r\n    if (index === animations.length - 1) {\r\n      setTimeout(() => { // change state to finished\r\n        const finishedArray = array.map((bar) => {\r\n          return { state: BAR_STATE.finished, value: bar.value }\r\n        })\r\n        setArray(finishedArray)\r\n        setTimeout(() => { // change state to sorted\r\n          const sortedArray = array.map((bar) => {\r\n            return { state: BAR_STATE.sorted, value: bar.value }\r\n          })\r\n          setArray(sortedArray)\r\n          setState(APP_STATE.sorted) // change app state\r\n        }, ARRAY_FLASH_SPEED)\r\n      }, index * ANIMATION_SPEED)\r\n    }\r\n  })\r\n}\r\n\r\nexport default animateHeapSort\r\n","import { BAR_STATE, APP_STATE, ARRAY_FLASH_SPEED } from \"../App\"\nimport { ANIMATION_TYPE } from \"../SortingController\"\n\nconst merge = (originalArray, auxiliaryArray, start, end, mid, animations, sortedIndex) => {\n  let k = start\n  let i = start\n  let j = mid + 1\n  while (i <= mid && j <= end) {\n    if (auxiliaryArray[i].value < auxiliaryArray[j].value) {\n      animations.push([k, j, ANIMATION_TYPE.comparison])\n      originalArray[k++] = auxiliaryArray[i++]\n    } else {\n      animations.push([k, j, ANIMATION_TYPE.swap])\n      originalArray[k++] = auxiliaryArray[j++]\n    }\n    if (start === 0 && end === originalArray.length - 1) {\n      sortedIndex.push(animations.length - 1)\n    }\n  }\n  while (i <= mid) {\n    originalArray[k++] = auxiliaryArray[i++]\n  }\n  while (j <= end) {\n    animations.push([k, j, ANIMATION_TYPE.swap])\n    originalArray[k++] = auxiliaryArray[j++]\n    if (start === 0 && end === originalArray.length - 1) {\n      sortedIndex.push(animations.length - 1)\n    }\n  }\n}\n\nconst mergeSort = (originalArray, auxiliaryArray, start, end, animations, sortedIndex) => {\n  if (start >= end) return\n  const mid = Math.floor((start + end) / 2)\n  mergeSort(auxiliaryArray, originalArray, start, mid, animations, sortedIndex)\n  mergeSort(auxiliaryArray, originalArray, mid + 1, end, animations, sortedIndex)\n  merge(originalArray, auxiliaryArray, start, end, mid, animations, sortedIndex)\n}\n\nconst animateMergeSort = (array, setArray, setState, ANIMATION_SPEED) => {\n  // change app state for disabling controls\n  setState(APP_STATE.sorting)\n\n  // sortedIndex pointer\n  let idx = 0\n\n  const animations = [] // stores comparison or swap animations\n  const sortedIndex = [] // stores animation indexes to highlight sorted bars\n\n  // get sorting animations\n  mergeSort(array.slice(), array.slice(), 0, array.length - 1, animations, sortedIndex)\n\n  // process animations\n  // animation -> [firstIndex, secondIndex, ANIMATION_TYPE]\n  animations.forEach((animation, index) => {\n    const currentArray = array.slice()\n\n    // comparison animation\n    if (animation[2] === ANIMATION_TYPE.comparison) {\n      setTimeout(() => {\n        currentArray[animation[0]].state = BAR_STATE.compared\n        currentArray[animation[1]].state = BAR_STATE.compared\n        setArray(currentArray)\n      }, index * ANIMATION_SPEED)\n    }\n    \n    // swap animation\n    if (animation[2] === ANIMATION_TYPE.swap) {\n      setTimeout(() => {\n        currentArray[animation[0]].state = BAR_STATE.swapped\n        currentArray[animation[1]].state = BAR_STATE.swapped\n        setArray(currentArray)\n      }, index * ANIMATION_SPEED)\n      setTimeout(() => {\n        const swap = currentArray[animation[1]].value\n        for (let i = animation[1]; i > animation[0]; i--) {\n          currentArray[i].value = currentArray[i - 1].value\n        }\n        currentArray[animation[0]].value = swap\n        setArray(currentArray)\n      }, index * ANIMATION_SPEED)\n    }\n\n    // revert state\n    setTimeout(() => {\n      currentArray[animation[0]].state = BAR_STATE.normal\n      currentArray[animation[1]].state = BAR_STATE.normal\n      setArray(currentArray)\n    }, index * ANIMATION_SPEED)\n\n    // if animation sorts a bar\n    if (index === sortedIndex[idx]) {\n      idx++\n      setTimeout(() => {\n        currentArray[animation[0]].state = BAR_STATE.sorted\n        setArray(currentArray)\n      }, index * ANIMATION_SPEED)\n    }\n\n    // flash array to indicate sorting finished\n    if (index === animations.length - 1) {\n      setTimeout(() => { // change state to sorted\n        const finishedArray = array.map((bar) => {\n          return { state: BAR_STATE.finished, value: bar.value }\n        })\n        setArray(finishedArray)\n        setTimeout(() => { // change state to finished\n          const sortedArray = array.map((bar) => {\n            return { state: BAR_STATE.sorted, value: bar.value }\n          })\n          setArray(sortedArray)\n          setState(APP_STATE.sorted) // change app state\n        }, ARRAY_FLASH_SPEED)\n      }, index * ANIMATION_SPEED)\n    }\n  })\n}\n\nexport default animateMergeSort\n","import { BAR_STATE, APP_STATE, ARRAY_FLASH_SPEED } from \"../App\"\nimport { ANIMATION_TYPE } from \"../SortingController\"\n\nconst swap = (array, i, j) => {\n  const swap = array[i]\n  array[i] = array[j]\n  array[j] = swap\n}\n\nconst partition = (originalArray, start, end, animations, sortedIndex) => {\n  let i = start - 1\n  let j = start\n  let k = end\n  while (j < k) {\n    animations.push([j, k, ANIMATION_TYPE.comparison])\n    if (originalArray[j].value < originalArray[k].value) {\n      i++\n      swap(originalArray, i, j)\n      animations.push([i, j, ANIMATION_TYPE.swap])\n    }\n    j++\n  }\n  swap(originalArray, i + 1, k)\n  animations.push([i + 1, k, ANIMATION_TYPE.swap])\n  sortedIndex.push(animations.length - 1)\n  return i + 1\n}\n\nconst quicksort = (originalArray, start, end, animations, sortedIndex) => {\n  if (start >= end) {\n    if (start === end) {\n      animations.push([start, end, ANIMATION_TYPE.comparison])\n      animations.push([start, end, ANIMATION_TYPE.swap])\n      sortedIndex.push(animations.length - 1)\n    }\n    return\n  }\n  const pivot = partition(originalArray, start, end, animations, sortedIndex)\n  quicksort(originalArray, start, pivot - 1, animations, sortedIndex)\n  quicksort(originalArray, pivot + 1, end, animations, sortedIndex)\n}\n\nconst animateQuickSort = (array, setArray, setState, ANIMATION_SPEED) => {\n  // change App state for disabling controls\n  setState(APP_STATE.sorting)\n\n  // sortedIndex pointer\n  let idx = 0\n\n  const animations = [] // stores comparison or swap animations\n  const sortedIndex = [] // stores animation indexes to highlight sorted bars\n\n  // get sorting animations\n  quicksort(array.slice(), 0, array.length - 1, animations, sortedIndex)\n\n  // process animations\n  // animation -> [firstIndex, secondIndex, ANIMATION_TYPE]\n  animations.forEach((animation, index) => {\n    const currentArray = array.slice()\n\n    // comparison animation\n    if (animation[2] === ANIMATION_TYPE.comparison) {\n      setTimeout(() => {\n        currentArray[animation[0]].state = BAR_STATE.compared\n        currentArray[animation[1]].state = BAR_STATE.pivot\n        setArray(currentArray)\n      }, index * ANIMATION_SPEED)\n    }\n\n    // swap animation\n    if (animation[2] === ANIMATION_TYPE.swap) {\n      setTimeout(() => {\n        currentArray[animation[0]].state = BAR_STATE.swapped\n        currentArray[animation[1]].state = BAR_STATE.swapped\n        setArray(currentArray)\n      }, index * ANIMATION_SPEED)\n      setTimeout(() => {\n        const swap = currentArray[animation[0]].value\n        currentArray[animation[0]].value = currentArray[animation[1]].value\n        currentArray[animation[1]].value = swap\n        setArray(currentArray)\n      }, index * ANIMATION_SPEED)\n    }\n\n    // revert state\n    setTimeout(() => {\n      currentArray[animation[0]].state = BAR_STATE.normal\n      currentArray[animation[1]].state = BAR_STATE.normal\n      setArray(currentArray)\n    }, index * ANIMATION_SPEED)\n\n    // if animation sorts a bar\n    if (index === sortedIndex[idx]) {\n      idx++\n      setTimeout(() => {\n        currentArray[animation[0]].state = BAR_STATE.sorted\n        setArray(currentArray)\n      }, index * ANIMATION_SPEED)\n    }\n\n    // flash array to indicate sorting finished\n    if (index === animations.length - 1) {\n      setTimeout(() => { // change state to finished\n        const finishedArray = array.map((bar) => {\n          return { state: BAR_STATE.finished, value: bar.value }\n        })\n        setArray(finishedArray)\n        setTimeout(() => { // change state to sorted\n          const sortedArray = array.map((bar) => {\n            return { state: BAR_STATE.sorted, value: bar.value }\n          })\n          setArray(sortedArray)\n          setState(APP_STATE.sorted) // change app state\n        }, ARRAY_FLASH_SPEED)\n      }, index * ANIMATION_SPEED)\n    }\n  })\n}\n\nexport default animateQuickSort\n","import { BAR_STATE, APP_STATE, ARRAY_FLASH_SPEED } from \"../App\"\nimport { ANIMATION_TYPE } from \"../SortingController\"\n\nconst swap = (array, i, j) => {\n  const swap = array[i]\n  array[i] = array[j]\n  array[j] = swap\n}\n\nconst bubbleSort = (originalArray) => {\n  const animations = [] // stores comparison or swap animations\n  const sortedIndex = [] // stores animation indexes to highlight sorted bars\n  const array = originalArray.slice() // make a copy of originalArray\n  for (let i = 0; i < array.length; i++) {\n    for (let j = 0; j < array.length - i - 1; j++) {\n      animations.push([j, j + 1, ANIMATION_TYPE.comparison])\n      if (array[j].value > array[j + 1].value) {\n        animations.push([j, j + 1, ANIMATION_TYPE.swap])\n        swap(array, j, j + 1)\n      }\n    }\n    sortedIndex.push(animations.length - 1)\n  }\n  return { animations, sortedIndex }\n}\n\nconst animateBubbleSort = (array, setArray, setState, ANIMATION_SPEED) => {\n  // change app state for disabling controls\n  setState(APP_STATE.sorting)\n\n  // get sorting animations\n  const { animations, sortedIndex } = bubbleSort(array)\n\n  // sortedIndex pointer\n  let idx = 0\n\n  // process animations\n  // animation -> [firstIndex, secondIndex, ANIMATION_TYPE]\n  animations.forEach((animation, index) => {\n    const currentArray = array.slice()\n\n    // comparison animation\n    if (animation[2] === ANIMATION_TYPE.comparison) {\n      setTimeout(() => {\n        currentArray[animation[0]].state = BAR_STATE.compared\n        currentArray[animation[1]].state = BAR_STATE.compared\n        setArray(currentArray)\n      }, index * ANIMATION_SPEED)\n    }\n\n    // swap animation only if different index\n    if (animation[2] === ANIMATION_TYPE.swap && animation[0] !== animation[1]) {\n      setTimeout(() => {\n        currentArray[animation[0]].state = BAR_STATE.swapped\n        currentArray[animation[1]].state = BAR_STATE.swapped\n        setArray(currentArray)\n      }, index * ANIMATION_SPEED)\n      setTimeout(() => {\n        const swap = currentArray[animation[0]].value\n        currentArray[animation[0]].value = currentArray[animation[1]].value\n        currentArray[animation[1]].value = swap\n        setArray(currentArray)\n      }, index * ANIMATION_SPEED)\n    }\n\n    // revert state\n    setTimeout(() => {\n      currentArray[animation[0]].state = BAR_STATE.normal\n      currentArray[animation[1]].state = BAR_STATE.normal\n      setArray(currentArray)\n    }, index * ANIMATION_SPEED)\n\n    // if animation sorts a bar\n    if (index === sortedIndex[idx]) {\n      idx++\n      setTimeout(() => {\n        currentArray[animation[1]].state = BAR_STATE.sorted\n        setArray(currentArray)\n      }, index * ANIMATION_SPEED)\n    }\n\n    // flash array to indicate sorting finished\n    if (index === animations.length - 1) {\n      setTimeout(() => { // change state to finished\n        const finishedArray = array.map((bar) => {\n          return { state: BAR_STATE.finished, value: bar.value }\n        })\n        setArray(finishedArray)\n        setTimeout(() => { // change state to sorted\n          const sortedArray = array.map((bar) => {\n            return { state: BAR_STATE.sorted, value: bar.value }\n          })\n          setArray(sortedArray)\n          setState(APP_STATE.sorted) // change app state\n        }, ARRAY_FLASH_SPEED)\n      }, index * ANIMATION_SPEED)\n    }\n  })\n}\n\nexport default animateBubbleSort\n","import { BAR_STATE, APP_STATE, ARRAY_FLASH_SPEED } from \"../App\"\nimport { ANIMATION_TYPE } from \"../SortingController\"\n\nconst swap = (array, i, j) => {\n  const swap = array[i]\n  array[i] = array[j]\n  array[j] = swap\n}\n\nconst selectionSort = (originalArray) => {\n  const animations = [] // stores comparison or swap animations\n  const sortedIndex = [] // stores animation indexes to highlight sorted bars\n  const array = originalArray.slice() // make a copy of originalArray\n  for (let i = 0; i < array.length - 1; i++) {\n    let min = i\n    for (let j = i + 1; j < array.length; j++) {\n      animations.push([min, j, ANIMATION_TYPE.comparison])\n      min = array[j].value < array[min].value ? j : min\n    }\n    animations.push([i, min, ANIMATION_TYPE.swap])\n    sortedIndex.push(animations.length - 1)\n    swap(array, i, min)\n  }\n  return { animations, sortedIndex }\n}\n\nconst animateSelectionSort = (array, setArray, setState, ANIMATION_SPEED) => {\n  // change app state for disabling controls\n  setState(APP_STATE.sorting)\n\n  // get sorting animations\n  const { animations, sortedIndex } = selectionSort(array)\n\n  // sortedIndex pointer\n  let idx = 0\n\n  // process animations\n  // animation -> [firstIndex, secondIndex, ANIMATION_TYPE]\n  animations.forEach((animation, index) => {\n    const currentArray = array.slice()\n\n    // comparison animation\n    if (animation[2] === ANIMATION_TYPE.comparison) {\n      setTimeout(() => {\n        currentArray[animation[0]].state = BAR_STATE.compared\n        currentArray[animation[1]].state = BAR_STATE.compared\n        setArray(currentArray)\n      }, index * ANIMATION_SPEED)\n    }\n\n    // swap animation\n    if (animation[2] === ANIMATION_TYPE.swap) {\n      setTimeout(() => {\n        currentArray[animation[0]].state = BAR_STATE.swapped\n        currentArray[animation[1]].state = BAR_STATE.swapped\n        setArray(currentArray)\n      }, index * ANIMATION_SPEED)\n      setTimeout(() => {\n        const swap = currentArray[animation[0]].value\n        currentArray[animation[0]].value = currentArray[animation[1]].value\n        currentArray[animation[1]].value = swap\n        setArray(currentArray)\n      }, index * ANIMATION_SPEED)\n    }\n\n    // revert state\n    setTimeout(() => {\n      currentArray[animation[0]].state = BAR_STATE.normal\n      currentArray[animation[1]].state = BAR_STATE.normal\n      setArray(currentArray)\n    }, index * ANIMATION_SPEED)\n\n    // if animation sorts a bar\n    if (index === sortedIndex[idx]) {\n      idx++\n      setTimeout(() => {\n        currentArray[animation[0]].state = BAR_STATE.sorted\n        setArray(currentArray)\n      }, index * ANIMATION_SPEED)\n    }\n\n    // flash array to indicate sorting finished\n    if (index === animations.length - 1) {\n      setTimeout(() => { // change state to finished\n        const finishedArray = array.map((bar) => {\n          return { state: BAR_STATE.finished, value: bar.value }\n        })\n        setArray(finishedArray)\n        setTimeout(() => { // change state to sorted\n          const sortedArray = array.map((bar) => {\n            return { state: BAR_STATE.sorted, value: bar.value }\n          })\n          setArray(sortedArray)\n          setState(APP_STATE.sorted) // change app state\n        }, ARRAY_FLASH_SPEED)\n      }, index * ANIMATION_SPEED)\n    }\n  })\n}\n\nexport default animateSelectionSort\n","import animateHeapSort from \"./algorithms/HeapSort\"\nimport animateMergeSort from \"./algorithms/MergeSort\"\nimport animateQuickSort from \"./algorithms/QuickSort\"\nimport animateBubbleSort from \"./algorithms/BubbleSort\"\nimport animateSelectionSort from \"./algorithms/SelectionSort\"\n\nexport const ANIMATION_TYPE = {\n  comparison: 0,\n  swap: 1,\n}\n\nconst sort = (algorithm, array, setArray, setState, ANIMATION_SPEED) => {\n  switch (algorithm) {\n    case \"Bubble Sort\":\n      animateBubbleSort(array, setArray, setState, ANIMATION_SPEED)\n      break\n\n    case \"Merge Sort\":\n      animateMergeSort(array, setArray, setState, ANIMATION_SPEED)\n      break\n\n    case \"Heap Sort\":\n      animateHeapSort(array, setArray, setState, ANIMATION_SPEED)\n      break\n\n    case \"Quick Sort\":\n      animateQuickSort(array, setArray, setState, ANIMATION_SPEED)\n      break\n\n    case \"Selection Sort\":\n      animateSelectionSort(array, setArray, setState, ANIMATION_SPEED)\n      break\n\n    default:\n      alert('Please choose an algorithm before clicking the \"Sort\" button!') // warning\n  }\n}\n\nexport default sort\n","import { useEffect, useState } from \"react\"\nimport { GoMarkGithub } from \"react-icons/go\"\nimport NavBar from \"./components/Navbar\"\nimport Array from \"./components/Array\"\nimport sort from \"./SortingController\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport \"react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css\"\n\nexport const BAR_STATE = {\n  normal: 0,\n  compared: 1,\n  swapped: 2,\n  sorted: 3,\n  finished: 4,\n  pivot: 5,\n}\n\nexport const BAR_COLORS = {\n  normal: \"darkgrey\",\n  swapped: \"lightgreen\",\n  finished: \"palegreen\",\n  compared: \"lightsalmon\",\n  sorted: \"thistle\",\n  pivot: \"khaki\",\n}\n\nexport const APP_STATE = {\n  default: 0,\n  sorting: 1,\n  sorted: 2,\n}\n\nexport const ARRAY_FLASH_SPEED = 1000\n\nconst ALGORITHMS = [\n  \"Merge Sort\",\n  \"Heap Sort\",\n  \"Quick Sort\",\n  \"Bubble Sort\",\n  \"Selection Sort\",\n]\n\nconst DEFAULT_ARRAY_SIZE = 50\nconst MAX_ARRAY_VALUE = 80\nconst MIN_ARRAY_VALUE = 2\n\nconst App = () => {\n  // animation speed calculator\n  const getAnimationSpeed = (size, algorithm) => {\n    let speedFactor = 0\n\n    switch (algorithm) {\n      case \"Merge Sort\":\n        speedFactor = 4000\n        break\n\n      case \"Quick Sort\":\n      case \"Heap Sort\":\n        speedFactor = 3000\n        break\n\n      case \"Bubble Sort\":\n      case \"Selection Sort\":\n        speedFactor = 2000\n        break\n\n      default:\n        speedFactor = 1000\n    }\n\n    return speedFactor / size\n  }\n\n  // App state\n  const [array, setArray] = useState([])\n  const [size, setSize] = useState(DEFAULT_ARRAY_SIZE)\n  const [state, setState] = useState(APP_STATE.default)\n  const [algorithm, setAlgorithm] = useState(ALGORITHMS[0])\n  const [ANIMATION_SPEED, setAnimationSpeed] = useState(\n    getAnimationSpeed(DEFAULT_ARRAY_SIZE, algorithm)\n  )\n\n  // animation speed hook\n  useEffect(() => {\n    setAnimationSpeed(getAnimationSpeed(size, algorithm))\n  }, [size, algorithm])\n\n  // array size hook\n  useEffect(() => {\n    setArray(generateRandomArray(size))\n  }, [size])\n\n  // change array or both size & array\n  const changeArraySize = (value = size) => {\n    setState(APP_STATE.default)\n    if (value === size) {\n      setArray(generateRandomArray(size))\n    } else {\n      setSize(value)\n    }\n  }\n\n  // change sorting algorithm\n  const changeAlgorithm = (algorithm) => {\n    setAlgorithm(algorithm)\n  }\n\n  // random integers b/w [MAX_ARRAY_VALUE, MIN_ARRAY_VALUE]\n  const generateRandomArray = (size) => {\n    const array = []\n    for (let i = 0; i < size; i++) {\n      array.push({\n        state: BAR_STATE.normal,\n        value:\n          Math.floor(Math.random() * (MAX_ARRAY_VALUE - 1)) + MIN_ARRAY_VALUE,\n      })\n    }\n    return array\n  }\n\n  // change sorted state to normal\n  const revertSortedState = () => {\n    const stateChangedArray = array.map((bar) => {\n      return {\n        state: BAR_STATE.normal,\n        value: bar.value,\n      }\n    })\n    return stateChangedArray\n  }\n\n  // sort button handler\n  const sortHandler = () => {\n    let currentArray = array\n    if (state === APP_STATE.sorted) {\n      currentArray = revertSortedState()\n    }\n    sort(algorithm, currentArray, setArray, setState, ANIMATION_SPEED)\n  }\n\n  return (\n    <div className=\"main\">\n      <NavBar\n        rangeSliderValue={size}\n        changeArraySize={changeArraySize}\n        algorithm={algorithm}\n        algorithms={ALGORITHMS}\n        changeAlgorithm={changeAlgorithm}\n        sortHandler={sortHandler}\n        state={state}\n      />\n      <Array array={array} />\n      <footer className=\"footer\">\n        <a\n          href=\"https://github.com/dwrik\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          className=\"links\"\n        >\n          <GoMarkGithub /> <span id=\"username\">dwrik</span>\n        </a>\n      </footer>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}